package me.zeroX150.cornos.features.module.impl.exploit;

import me.zeroX150.cornos.Cornos;
import me.zeroX150.cornos.etc.config.MConfMultiOption;
import me.zeroX150.cornos.etc.config.MConfNum;
import me.zeroX150.cornos.etc.config.MConfToggleable;
import me.zeroX150.cornos.etc.event.EventHelper;
import me.zeroX150.cornos.etc.event.EventType;
import me.zeroX150.cornos.etc.event.arg.PacketEvent;
import me.zeroX150.cornos.etc.helper.Renderer;
import me.zeroX150.cornos.etc.render.Notification;
import me.zeroX150.cornos.features.module.Module;
import me.zeroX150.cornos.features.module.ModuleType;
import net.minecraft.block.*;
import net.minecraft.client.util.math.MatrixStack;
import net.minecraft.network.packet.c2s.play.PlayerActionC2SPacket;
import net.minecraft.network.packet.c2s.play.PlayerMoveC2SPacket;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.Direction;
import net.minecraft.util.math.Vec3d;

import java.awt.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AntiAntiXray extends Module {
    MConfNum delay = new MConfNum("delay", 5, 100, 0, "Delay in ticks between packets");
    MConfNum range = new MConfNum("range", 15, 64, 1, "Range in blocks to scan");
    MConfMultiOption mode = new MConfMultiOption("mode", "ores",
            new String[]{"ores", "stone", "diamond", "redstone", "allBlocks"}, "Mode");
    MConfToggleable randomize = new MConfToggleable("randomize", true, "Randomize packet positions");
    MConfToggleable rescan = new MConfToggleable("rescan", false, "Rescan after a specific distance is walked");
    MConfNum rescanDist = new MConfNum("rescanDist", 20, 100, 1, "The distance you have to walk before rescan");
    MConfToggleable removeUnusual = new MConfToggleable("removeUnusual", false, "Remove unnatural block placements");

    Map<Block, Range> ranges = new HashMap<>();
    List<BlockPos> tail = new ArrayList<>();
    BlockPos start;

    List<BlockPos> queue = new ArrayList<>();
    boolean finishedScanning = false;
    int maxSize = -1;
    Notification scanningNotif;
    BlockPos current = null;
    int delaySpent = 0;

    public AntiAntiXray() {
        super("AntiAntiXray", "fuck you orebfuscator", ModuleType.EXPLOIT);
        mconf.add(delay);
        mconf.add(removeUnusual);
        mconf.add(range);
        mconf.add(mode);
        mconf.add(randomize);
        mconf.add(rescan);
        mconf.add(rescanDist);

        ranges.put(Blocks.OBSIDIAN, Range.ALL);
        ranges.put(Blocks.CLAY, Range.ALL);
        ranges.put(Blocks.MOSSY_COBBLESTONE, Range.ALL);
        ranges.put(Blocks.DIAMOND_ORE, new Range(3, 15)); // 1, 15
        ranges.put(Blocks.REDSTONE_ORE, new Range(1, 15)); // 1, 15
        ranges.put(Blocks.IRON_ORE, new Range(1, 63)); // 5, 63
        ranges.put(Blocks.COAL_ORE, new Range(5, 127)); // 5, 127
        ranges.put(Blocks.LAPIS_ORE, new Range(13, 33));
        ranges.put(Blocks.GOLD_ORE, new Range(5, 25)); // 5, 33
        ranges.put(Blocks.EMERALD_ORE, new Range(1, 32));
        ranges.put(Blocks.ANCIENT_DEBRIS, new Range(13, 23)); // 13, 119
        ranges.put(Blocks.NETHER_GOLD_ORE, new Range(15, 95)); // 15, 116
        ranges.put(Blocks.NETHER_QUARTZ_ORE, new Range(10, 114)); // 10, 127

        EventHelper.BUS.registerEvent(EventType.ONPACKETSEND, event -> {
            PacketEvent ev = (PacketEvent) event;
            if (ev.packet instanceof PlayerMoveC2SPacket) {
                if (rescan.isEnabled() && start != null) {
                    Vec3d currentPos = Cornos.minecraft.player.getPos();
                    Vec3d lastEnabled = new Vec3d(start.getX(), start.getY(), start.getZ());
                    if (lastEnabled.distanceTo(currentPos) > rescanDist.getValue() && !this.isEnabled()) {
                        setEnabled(true);
                    }
                }
            }
        });
    }

    void addQueue(BlockPos p) {
        if (randomize.isEnabled()) {
            queue.add((int) Math.floor(Math.random() * queue.size()), p);
        } else
            queue.add(p);
    }

    @Override
    public void onEnable() {
        start = Cornos.minecraft.player.getBlockPos();
        scanningNotif = Notification.create("AntiAntiXray", new String[2], 0xFFFFFF);
        queue.clear();
        int rangeMid = (int) (range.getValue() / 2);
        BlockPos playerPos = Cornos.minecraft.player.getBlockPos();
        boolean acceptAll = mode.value.equalsIgnoreCase("allBlocks");
        for (int x = 0; x < range.getValue(); x++) {
            int actualX = playerPos.getX() - rangeMid + x;
            for (int y = 0; y < range.getValue(); y++) {
                int actualY = playerPos.getY() - rangeMid + y;
                if (actualY < 0 || 255 < actualY)
                    continue;
                for (int z = 0; z < range.getValue(); z++) {
                    int actualZ = playerPos.getZ() - rangeMid + z;
                    BlockPos current = new BlockPos(actualX, actualY, actualZ);
                    BlockState state = Cornos.minecraft.world.getBlockState(current);
                    if (state.isAir())
                        continue;
                    if (acceptAll)
                        addQueue(current);
                    else {
                        if (mode.value.equalsIgnoreCase("ores") && (state.getBlock() instanceof OreBlock))
                            addQueue(current);
                        else if (mode.value.equalsIgnoreCase("stone") && state.getBlock() == (Blocks.STONE))
                            addQueue(current);
                        else if (mode.value.equalsIgnoreCase("diamond") && state.getBlock() == (Blocks.DIAMOND_ORE))
                            addQueue(current);
                        else if (mode.value.equals("redstone") && state.getBlock() == (Blocks.REDSTONE_ORE))
                            addQueue(current);
                    }

                    if (removeUnusual.isEnabled() && (state.getBlock() instanceof OreBlock
                            || (state.getBlock() instanceof RedstoneOreBlock))) {
                        Block b = state.getBlock();
                        Range r = ranges.get(b);
                        if (r == null)
                            continue;
                        if (!r.isInRange(current.getY())) {
                            Cornos.minecraft.world.setBlockState(current, Blocks.STONE.getDefaultState());
                            queue.remove(current);
                        }
                    }
                }
            }
        }
        finishedScanning = true;
        maxSize = queue.size();
    }

    @Override
    public void onRender(MatrixStack ms, float td) {
        float rv = (int) range.getValue();
        Renderer.renderBlockOutline(
                new Vec3d(start.getX() - (rv / 2), start.getY() - (rv / 2), start.getZ() - (rv / 2)),
                new Vec3d(rv, rv, rv), 50, 50, 255, 255);

        if (current != null) {
            Renderer.renderBlockOutline(new Vec3d(current.getX(), current.getY(), current.getZ()), new Vec3d(1, 1, 1),
                    50, 255, 100, 255);
        }
        BlockPos prev = null;
        for (BlockPos blockPos : tail.toArray(new BlockPos[0])) {
            if (prev != null && blockPos != null) {
                Renderer.renderLine(new Vec3d(prev.getX() + .5, prev.getY() + .5, prev.getZ() + .5),
                        new Vec3d(blockPos.getX() + .5, blockPos.getY() + .5, blockPos.getZ() + .5),
                        new Color(15, 243, 171), 2);
            }
            prev = blockPos;
        }
    }

    @Override
    public void onFastUpdate() {
        delaySpent++;
        if (delaySpent > delay.getValue()) {
            delaySpent = 0;
        } else
            return;
        if (!finishedScanning)
            return;
        if (queue.size() <= 0) {
            this.setEnabled(false);
            return;
        }
        this.current = queue.get(0);
        tail.add(current);
        if (tail.size() > 30)
            tail.remove(0);
        queue.remove(0);
        scanningNotif.description[0] = (queue.size()) + " blocks remain";
        scanningNotif.description[1] = (maxSize - queue.size()) + " blocks scanned";

        PlayerActionC2SPacket p = new PlayerActionC2SPacket(PlayerActionC2SPacket.Action.ABORT_DESTROY_BLOCK, current,
                Direction.DOWN);
        Cornos.minecraft.getNetworkHandler().sendPacket(p);
    }

    @Override
    public void onDisable() {
        scanningNotif.duration = 0;
    }

    @Override
    public String getContext() {
        return (maxSize - queue.size()) + " / " + maxSize;
    }

    static class Range {
        public static final Range ALL = new Range(Integer.MIN_VALUE, Integer.MAX_VALUE);
        private final int min;
        private final int max;

        private Range(int min, int max) {
            this.min = min;
            this.max = max;
        }

        public boolean isInRange(int n) {
            return n <= max && n >= min;
        }
    }
}
