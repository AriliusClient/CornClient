package me.zeroX150.cornos.features.module.impl.exploit;

import me.zeroX150.cornos.Cornos;
import me.zeroX150.cornos.etc.config.MConfNum;
import me.zeroX150.cornos.etc.config.MConfToggleable;
import me.zeroX150.cornos.etc.event.EventHelper;
import me.zeroX150.cornos.etc.event.EventType;
import me.zeroX150.cornos.etc.event.arg.PacketEvent;
import me.zeroX150.cornos.etc.helper.Rnd;
import me.zeroX150.cornos.features.module.Module;
import me.zeroX150.cornos.features.module.ModuleType;
import net.minecraft.network.Packet;
import net.minecraft.network.packet.c2s.play.KeepAliveC2SPacket;

import java.util.ArrayList;
import java.util.List;

public class PingSpoof extends Module {
    List<PacketEntry> among = new ArrayList<>();
    List<Packet<?>> dontBlock = new ArrayList<>();

    MConfNum delay = new MConfNum("delayMS", 50, 1000, 0, "Delay in ms to delay packets");
    MConfToggleable dropRandom = new MConfToggleable("dropRandom", false, "Drop random packets");
    MConfNum dropChance = new MConfNum("dropChance%", 10, 100, 0, "The chance in % to drop packets");


    public PingSpoof() {
        super("PingSpoof", "spoofs pings", ModuleType.EXPLOIT);
        mconf.add(delay);
        mconf.add(dropRandom);
        mconf.add(dropChance);
        Module parent = this;
        EventHelper.BUS.registerEvent(EventType.ONPACKETSEND, event -> {
            if (!parent.isEnabled()) return;
            PacketEvent ev = (PacketEvent) event;
            if (!dontBlock.contains(ev.packet)) {
                event.cancel();
                if (!(!(ev.packet instanceof KeepAliveC2SPacket) && dropRandom.isEnabled() && Rnd.rndD(100) < dropChance.getValue()))
                    among.add(new PacketEntry(ev.packet, delay.getValue()));
            } else dontBlock.remove(ev.packet);
        });
    }

    @Override
    public void onEnable() {
        among.clear();
        dontBlock.clear();
        super.onEnable();
    }

    @Override
    public void onDisable() {
        onEnable();
        super.onDisable();
    }

    @Override
    public void onFastUpdate() {
        if (Cornos.minecraft.getNetworkHandler() == null) return;
        long current = System.currentTimeMillis();
        for (PacketEntry packetEntry : among.toArray(new PacketEntry[0])) {
            if (current >= (packetEntry.entryTime + packetEntry.delay)) {
                dontBlock.add(packetEntry.packet);
                among.remove(packetEntry);
                Cornos.minecraft.getNetworkHandler().sendPacket(packetEntry.packet);
            }
        }
    }
}

class PacketEntry {
    public final Packet<?> packet;
    public final double delay;
    public final long entryTime;

    public PacketEntry(Packet<?> packet, double delay) {
        this.packet = packet;
        this.delay = delay;
        entryTime = System.currentTimeMillis();
    }
}
