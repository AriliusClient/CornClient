package me.zeroX150.cornos.features.module.impl.exploit;

import java.util.Objects;

import me.zeroX150.cornos.Cornos;
import me.zeroX150.cornos.etc.config.MConfToggleable;
import me.zeroX150.cornos.etc.event.EventHelper;
import me.zeroX150.cornos.etc.event.EventType;
import me.zeroX150.cornos.etc.event.arg.PacketEvent;
import me.zeroX150.cornos.features.module.Module;
import me.zeroX150.cornos.features.module.ModuleType;
import me.zeroX150.cornos.mixin.packet.PlayerMoveC2SPacketAccessor;
import net.minecraft.client.MinecraftClient;
import net.minecraft.network.packet.c2s.play.ClientCommandC2SPacket;
import net.minecraft.network.packet.c2s.play.PlayerMoveC2SPacket;

public class AntiHunger extends Module {
	MinecraftClient mc = Cornos.minecraft;
	private boolean lastOnGround;
	private boolean sendOnGroundTruePacket;
	private boolean ignorePacket;

	public AntiHunger() {
		super("AntiHunger", "Makes you not have hunger", ModuleType.EXPLOIT);
		this.mconf.add(new MConfToggleable("sprint", true));
		this.mconf.add(new MConfToggleable("onGround", true));
		Module parent = this;
		EventHelper.BUS.registerEvent(EventType.ONPACKETSEND, event -> {
			if (!parent.isEnabled())
				return;
			if (ignorePacket)
				return;
			PacketEvent PE = (PacketEvent) event;
			if (PE.packet instanceof ClientCommandC2SPacket
					&& ((MConfToggleable) this.mconf.getByName("sprint")).isEnabled()) {
				ClientCommandC2SPacket.Mode mode = ((ClientCommandC2SPacket) PE.packet).getMode();
				if (mode == ClientCommandC2SPacket.Mode.START_SPRINTING
						|| mode == ClientCommandC2SPacket.Mode.STOP_SPRINTING) {
					event.cancel();
				}
			}
			if (PE.packet instanceof PlayerMoveC2SPacket
					&& ((MConfToggleable) this.mconf.getByName("onGround")).isEnabled()) {
				assert mc.player != null;
				if (mc.player.isOnGround() && mc.player.fallDistance <= 0.0) {
					assert mc.interactionManager != null;
					if (!mc.interactionManager.isBreakingBlock()) {
						((PlayerMoveC2SPacketAccessor) PE.packet).setOnGround(false);
					}
				}
			}
		});
	}

	@Override
	public void onExecute() {
		assert mc.player != null;
		if (mc.player.isOnGround() && !lastOnGround && !sendOnGroundTruePacket)
			sendOnGroundTruePacket = true;

		if (mc.player.isOnGround() && sendOnGroundTruePacket
				&& ((MConfToggleable) this.mconf.getByName("onGround")).isEnabled()) {
			ignorePacket = true;
			Objects.requireNonNull(mc.getNetworkHandler()).sendPacket(new PlayerMoveC2SPacket(true));
			ignorePacket = false;

			sendOnGroundTruePacket = false;
		}

		lastOnGround = mc.player.isOnGround();
	}
}